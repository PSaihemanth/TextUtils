{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","aboutText","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.35d31d71.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n          </li> */}\r\n          </ul>\r\n        {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n        </form> */} \r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n      </div>\r\n    </div> \r\n  </nav>\r\n  )\r\n}\r\n\r\n// proptypes\r\n// Navbar.propTypes = {\r\n//   title: PropTypes.string,\r\n//   aboutText:PropTypes.string,}\r\n\r\n  // default props\r\n\r\n// Navbar.defaultProps = {\r\n//   title:'Textutils',\r\n//   aboutText:'About'\r\n// };\r\n","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to uppercase!\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase!\",\"success\");\r\n\r\n    }\r\n     \r\n    const handleClearClick = () => {\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    } \r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    const [text, setText] = useState('');\r\n    //  text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n  return(\r\n     <> \r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n      <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppecase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters </p>\r\n      <p>{0.008 * text.split(\" \").length }Minutes read</p>\r\n      <h3>Preview</h3>\r\n      <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n  </div>\r\n  </>\r\n  )\r\n}\r\n","import React from 'react'\r\n \r\n function Alert(props) {\r\n const capitalize = (word) => {\r\n   const lower = word.toLowerCase();\r\n   return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n }\r\n   return (\r\n props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n</div>\r\n   )\r\n }\r\n \r\n export default Alert;","import './App.css';\r\nimport Navbar from './components/Navbar';\r\n// import About from './components/About';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n  const [alert,setAlert]= useState(null);\r\n\r\nconst showAlert = (message, type)=>{\r\n  setAlert({\r\n    msg:message,\r\n    type:type\r\n  })\r\n  setTimeout(()=>{\r\n   setAlert(null);\r\n  },1500);\r\n}\r\n  const toggleMode = () =>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n      // setInterval(() => {\r\n      //   document.title = 'TextUtils is Amazing ';\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = 'Install TextUtils now';\r\n      // }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\",\"success\") ;\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n  return (\r\n <>\r\n {/* <Navbar title='TextUtils' aboutText=\"About TextUtils\"/> */}\r\n {/* <Navbar/> */}\r\n {/* <Router> */}\r\n<Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\r\n<Alert alert={alert}/>\r\n<div className=\"container my-3\">\r\n{/* <Switch> */}\r\n          {/* <Route exact path=\"/about\"> */}\r\n            {/* <About /> */}\r\n          {/* </Route> */}\r\n         \r\n          {/* <Route exact path=\"/\"> */}\r\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below  \" mode={mode}/>\r\n          {/* </Route> */}\r\n{/* </Switch> */}\r\n</div>\r\n{/* </Router> */}\r\n\r\n</>\r\n  );\r\n}\r\n\r\nexport default App;  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}