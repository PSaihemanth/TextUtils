{"version":3,"sources":["components/Navbar.js","components/About.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btntext","setBtnText","style","aria-labelledby","data-bs-parent","border","TextForm","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","react_router_dom","document","body","components_Alert","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.7f81b1e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n          </li> */}\r\n          </ul>\r\n        {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n        </form> */} \r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n      </div>\r\n    </div> \r\n  </nav>\r\n  )\r\n}\r\n\r\n// proptypes\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText:PropTypes.string,}\r\n\r\n  // default props\r\n\r\nNavbar.defaultProps = {\r\n  title:'Textutils',\r\n  aboutText:'About'\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function About() {\r\n\r\n   const [myStyle, setMyStyle] = useState( {\r\n    color:'black',\r\n    backgroundColor:'white',\r\n})\r\n\r\nconst [btntext,setBtnText] = useState(\"Enable Dark Mode\");\r\n   \r\nconst toggleStyle= ()=>{\r\n if( myStyle.color === 'black'){\r\n    setMyStyle({\r\n      color:'white',\r\n      backgroundColor:'black',\r\n      border:'1px solid white'\r\n    })\r\n    setBtnText(\"Enable Light Mode\")\r\n }\r\n else{\r\n  setMyStyle({\r\n    color:'black',\r\n    backgroundColor:'white'\r\n  })\r\n  setBtnText(\"Enable Dark Mode\")\r\n }\r\n}\r\n\r\n  return <div className=\"container\" style={myStyle}>\r\n      <h1 className='my-3'>About Us</h1>\r\n     <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={myStyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"container my-3\">\r\n  <button onClick={toggleStyle} type='button' className=\"btn btn-primary\">{btntext}</button>\r\n  </div>\r\n</div> \r\n  </div>;\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to uppercase!\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase!\",\"success\");\r\n\r\n    }\r\n     \r\n    const handleClearClick = () => {\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    } \r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    const [text, setText] = useState('');\r\n    //  text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n  return(\r\n     <> \r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n      <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppecase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters </p>\r\n      <p>{0.008 * text.split(\" \").length }Minutes read</p>\r\n      <h3>Preview</h3>\r\n      <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n  </div>\r\n  </>\r\n  )\r\n}\r\n","import React from 'react'\r\n \r\n function Alert(props) {\r\n const capitalize = (word) => {\r\n   const lower = word.toLowerCase();\r\n   return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n }\r\n   return (\r\n props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n</div>\r\n   )\r\n }\r\n \r\n export default Alert;","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport About from './components/About';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n  const [alert,setAlert]= useState(null);\r\n\r\nconst showAlert = (message, type)=>{\r\n  setAlert({\r\n    msg:message,\r\n    type:type\r\n  })\r\n  setTimeout(()=>{\r\n   setAlert(null);\r\n  },1500);\r\n}\r\n  const toggleMode = () =>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n      // setInterval(() => {\r\n      //   document.title = 'TextUtils is Amazing ';\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = 'Install TextUtils now';\r\n      // }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\",\"success\") ;\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n  return (\r\n <>\r\n {/* <Navbar title='TextUtils' aboutText=\"About TextUtils\"/> */}\r\n {/* <Navbar/> */}\r\n <Router>\r\n<Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\r\n<Alert alert={alert}/>\r\n<div className=\"container my-3\">\r\n<Switch>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n         \r\n          <Route exact path=\"/\">\r\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below  \" mode={mode}/>\r\n          </Route>\r\n</Switch>\r\n</div>\r\n</Router>\r\n\r\n</>\r\n  );\r\n}\r\n\r\nexport default App;  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}